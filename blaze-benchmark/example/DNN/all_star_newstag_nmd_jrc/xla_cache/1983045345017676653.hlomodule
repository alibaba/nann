HloModule cluster_0__XlaCompiledKernel_true__XlaNumConstantArgs_52__XlaNumResourceArgs_0_.285

%max_float_.140 (x.141: f32[], y.142: f32[]) -> f32[] {
  %x.141 = f32[] parameter(0)
  %y.142 = f32[] parameter(1)
  ROOT %maximum.143 = f32[] maximum(f32[] %x.141, f32[] %y.142)
}

%max_float_.171 (x.172: f32[], y.173: f32[]) -> f32[] {
  %x.172 = f32[] parameter(0)
  %y.173 = f32[] parameter(1)
  ROOT %maximum.174 = f32[] maximum(f32[] %x.172, f32[] %y.173)
}

%max_float_.249 (x.250: f32[], y.251: f32[]) -> f32[] {
  %x.250 = f32[] parameter(0)
  %y.251 = f32[] parameter(1)
  ROOT %maximum.252 = f32[] maximum(f32[] %x.250, f32[] %y.251)
}

%fused_computation (param_0.1: f32[5244], param_1.76: f32[200,1852], param_2.18: f32[200,96], param_3.4: f32[200,96], param_4.7: f32[200,96], param_5.8: f32[200,6,8], param_6.5: f32[200,1,8], param_7.5: f32[200,2,8], param_8.5: f32[200,6,8], param_9.5: f32[200,1,8], param_10.7: f32[200,2,8], param_11.5: f32[200,6,8], param_12.5: f32[200,1,8], param_13.5: f32[200,2,8], param_14.5: f32[200,6,8], param_15.5: f32[200,1,8], param_16.5: f32[200,2,8], param_17.5: f32[200,3,8], param_18.6: f32[200,3,8], param_19.6: f32[200,14,8], param_20.6: f32[1,96], param_21.6: f32[1,128], param_22.6: f32[1,128], param_23.6: f32[1,96], param_24.6: f32[1,96], param_25.10: f16[1,1728], param_26.6: f32[5244], param_27.6: f32[8,200,32], param_28.6: f32[4,200,24,1], param_29.6: f32[4,200,24], param_30.13: f32[200,14,2,4]) -> f32[200,5244] {
  %param_26.6 = f32[5244]{0} parameter(26)
  %broadcast.18 = f32[200,5244]{1,0} broadcast(f32[5244]{0} %param_26.6), dimensions={1}
  %param_1.76 = f32[200,1852]{1,0} parameter(1)
  %param_2.18 = f32[200,96]{1,0} parameter(2)
  %param_25.10 = f16[1,1728]{1,0} parameter(25)
  %convert.26 = f32[1,1728]{1,0} convert(f16[1,1728]{1,0} %param_25.10)
  %param_20.6 = f32[1,96]{1,0} parameter(20)
  %param_21.6 = f32[1,128]{1,0} parameter(21)
  %param_22.6 = f32[1,128]{1,0} parameter(22)
  %param_23.6 = f32[1,96]{1,0} parameter(23)
  %param_24.6 = f32[1,96]{1,0} parameter(24)
  %concatenate.5 = f32[1,2272]{1,0} concatenate(f32[1,1728]{1,0} %convert.26, f32[1,96]{1,0} %param_20.6, f32[1,128]{1,0} %param_21.6, f32[1,128]{1,0} %param_22.6, f32[1,96]{1,0} %param_23.6, f32[1,96]{1,0} %param_24.6), dimensions={1}
  %bitcast.106 = f32[2272]{0} bitcast(f32[1,2272]{1,0} %concatenate.5)
  %broadcast.17 = f32[200,2272]{1,0} broadcast(f32[2272]{0} %bitcast.106), dimensions={1}
  %param_3.4 = f32[200,96]{1,0} parameter(3)
  %param_27.6 = f32[8,200,32]{2,1,0} parameter(27)
  %bitcast.110 = f32[200,2,4,32]{3,0,2,1} bitcast(f32[8,200,32]{2,1,0} %param_27.6)
  %copy.42 = f32[200,2,4,32]{3,2,1,0} copy(f32[200,2,4,32]{3,0,2,1} %bitcast.110)
  %bitcast.109 = f32[200,256]{1,0} bitcast(f32[200,2,4,32]{3,2,1,0} %copy.42)
  %param_28.6 = f32[4,200,24,1]{3,2,1,0} parameter(28)
  %bitcast.114 = f32[200,4,24,1]{3,2,0,1} bitcast(f32[4,200,24,1]{3,2,1,0} %param_28.6)
  %copy.44 = f32[200,4,24,1]{2,1,0,3} copy(f32[200,4,24,1]{3,2,0,1} %bitcast.114)
  %bitcast.113 = f32[200,96]{1,0} bitcast(f32[200,4,24,1]{2,1,0,3} %copy.44)
  %param_4.7 = f32[200,96]{1,0} parameter(4)
  %param_29.6 = f32[4,200,24]{2,1,0} parameter(29)
  %bitcast.118 = f32[200,1,4,24]{3,0,2,1} bitcast(f32[4,200,24]{2,1,0} %param_29.6)
  %copy.46 = f32[200,1,4,24]{3,2,0,1} copy(f32[200,1,4,24]{3,0,2,1} %bitcast.118)
  %bitcast.117 = f32[200,96]{1,0} bitcast(f32[200,1,4,24]{3,2,0,1} %copy.46)
  %param_5.8 = f32[200,6,8]{2,1,0} parameter(5)
  %param_6.5 = f32[200,1,8]{2,1,0} parameter(6)
  %param_7.5 = f32[200,2,8]{2,1,0} parameter(7)
  %param_8.5 = f32[200,6,8]{2,1,0} parameter(8)
  %param_9.5 = f32[200,1,8]{2,1,0} parameter(9)
  %param_10.7 = f32[200,2,8]{2,1,0} parameter(10)
  %param_11.5 = f32[200,6,8]{2,1,0} parameter(11)
  %param_12.5 = f32[200,1,8]{2,1,0} parameter(12)
  %param_13.5 = f32[200,2,8]{2,1,0} parameter(13)
  %param_14.5 = f32[200,6,8]{2,1,0} parameter(14)
  %param_15.5 = f32[200,1,8]{2,1,0} parameter(15)
  %param_16.5 = f32[200,2,8]{2,1,0} parameter(16)
  %param_17.5 = f32[200,3,8]{2,1,0} parameter(17)
  %param_30.13 = f32[200,14,2,4]{3,2,1,0} parameter(30)
  %bitcast.120 = f32[200,14,8]{2,1,0} bitcast(f32[200,14,2,4]{3,2,1,0} %param_30.13)
  %slice.24 = f32[200,3,8]{2,1,0} slice(f32[200,14,8]{2,1,0} %bitcast.120), slice={[0:200], [8:11], [0:8]}
  %param_18.6 = f32[200,3,8]{2,1,0} parameter(18)
  %param_19.6 = f32[200,14,8]{2,1,0} parameter(19)
  %slice.1 = f32[200,3,8]{2,1,0} slice(f32[200,14,8]{2,1,0} %param_19.6), slice={[0:200], [11:14], [0:8]}
  %concatenate.1 = f32[200,48,8]{2,1,0} concatenate(f32[200,6,8]{2,1,0} %param_5.8, f32[200,1,8]{2,1,0} %param_6.5, f32[200,2,8]{2,1,0} %param_7.5, f32[200,6,8]{2,1,0} %param_8.5, f32[200,1,8]{2,1,0} %param_9.5, f32[200,2,8]{2,1,0} %param_10.7, f32[200,6,8]{2,1,0} %param_11.5, f32[200,1,8]{2,1,0} %param_12.5, f32[200,2,8]{2,1,0} %param_13.5, f32[200,6,8]{2,1,0} %param_14.5, f32[200,1,8]{2,1,0} %param_15.5, f32[200,2,8]{2,1,0} %param_16.5, f32[200,3,8]{2,1,0} %param_17.5, f32[200,3,8]{2,1,0} %slice.24, f32[200,3,8]{2,1,0} %param_18.6, f32[200,3,8]{2,1,0} %slice.1), dimensions={1}
  %bitcast.53 = f32[200,384]{1,0} bitcast(f32[200,48,8]{2,1,0} %concatenate.1)
  %concatenate.0 = f32[200,5244]{1,0} concatenate(f32[200,1852]{1,0} %param_1.76, f32[200,96]{1,0} %param_2.18, f32[200,2272]{1,0} %broadcast.17, f32[200,96]{1,0} %param_3.4, f32[200,256]{1,0} %bitcast.109, f32[200,96]{1,0} %bitcast.113, f32[200,96]{1,0} %param_4.7, f32[200,96]{1,0} %bitcast.117, f32[200,384]{1,0} %bitcast.53), dimensions={1}
  %multiply.0 = f32[200,5244]{1,0} multiply(f32[200,5244]{1,0} %broadcast.18, f32[200,5244]{1,0} %concatenate.0)
  %param_0.1 = f32[5244]{0} parameter(0)
  %broadcast.3 = f32[200,5244]{1,0} broadcast(f32[5244]{0} %param_0.1), dimensions={1}
  ROOT %add.2 = f32[200,5244]{1,0} add(f32[200,5244]{1,0} %multiply.0, f32[200,5244]{1,0} %broadcast.3)
}

%fused_computation.2 (param_0.97: f32[4,200,200], param_1.34: f32[4,200]) -> f32[4,200,200] {
  %param_0.97 = f32[4,200,200]{2,1,0} parameter(0)
  %param_1.34 = f32[4,200]{1,0} parameter(1)
  %broadcast.5 = f32[4,200,200]{2,1,0} broadcast(f32[4,200]{1,0} %param_1.34), dimensions={0,1}
  %divide.0 = f32[4,200,200]{2,1,0} divide(f32[4,200,200]{2,1,0} %param_0.97, f32[4,200,200]{2,1,0} %broadcast.5)
  %constant_6 = f32[] constant(1e-07)
  %broadcast.4 = f32[4,200,200]{2,1,0} broadcast(f32[] %constant_6), dimensions={}
  ROOT %add.3 = f32[4,200,200]{2,1,0} add(f32[4,200,200]{2,1,0} %divide.0, f32[4,200,200]{2,1,0} %broadcast.4)
}

%fused_computation.4 (param_0.12: f32[1,96], param_1.10: f32[200,96]) -> f32[4,200,24] {
  %param_1.10 = f32[200,96]{1,0} parameter(1)
  %bitcast.57 = f32[1,200,96]{2,1,0} bitcast(f32[200,96]{1,0} %param_1.10)
  %param_0.12 = f32[1,96]{1,0} parameter(0)
  %broadcast.7 = f32[1,200,96]{2,1,0} broadcast(f32[1,96]{1,0} %param_0.12), dimensions={0,2}
  %add.4 = f32[1,200,96]{2,1,0} add(f32[1,200,96]{2,1,0} %bitcast.57, f32[1,200,96]{2,1,0} %broadcast.7)
  %reshape.31 = f32[1,200,4,24]{3,1,2,0} reshape(f32[1,200,96]{2,1,0} %add.4)
  ROOT %bitcast.56 = f32[4,200,24]{2,1,0} bitcast(f32[1,200,4,24]{3,1,2,0} %reshape.31)
}

%fused_computation.7 (param_0.98: f32[8,200,150], param_1.35: f32[8,200]) -> f32[8,200,150] {
  %param_0.98 = f32[8,200,150]{2,1,0} parameter(0)
  %param_1.35 = f32[8,200]{1,0} parameter(1)
  %broadcast.9 = f32[8,200,150]{2,1,0} broadcast(f32[8,200]{1,0} %param_1.35), dimensions={0,1}
  %divide.1 = f32[8,200,150]{2,1,0} divide(f32[8,200,150]{2,1,0} %param_0.98, f32[8,200,150]{2,1,0} %broadcast.9)
  %constant_7 = f32[] constant(1e-07)
  %broadcast.8 = f32[8,200,150]{2,1,0} broadcast(f32[] %constant_7), dimensions={}
  ROOT %add.5 = f32[8,200,150]{2,1,0} add(f32[8,200,150]{2,1,0} %divide.1, f32[8,200,150]{2,1,0} %broadcast.8)
}

%fused_computation.9 (param_0.25: f32[2,150,128]) -> f32[8,150,32] {
  %param_0.25 = f32[2,150,128]{2,1,0} parameter(0)
  %bitcast.63 = f32[2,4,150,32]{3,1,2,0} bitcast(f32[2,150,128]{2,1,0} %param_0.25)
  %copy.29 = f32[2,4,150,32]{3,2,1,0} copy(f32[2,4,150,32]{3,1,2,0} %bitcast.63)
  ROOT %bitcast.62 = f32[8,150,32]{2,1,0} bitcast(f32[2,4,150,32]{3,2,1,0} %copy.29)
}

%fused_computation.10 (param_0.28: f32[1,150,128], param_1.39: f16[1,38400]) -> f32[2,150,128] {
  %param_1.39 = f16[1,38400]{1,0} parameter(1)
  %convert.22 = f32[1,38400]{1,0} convert(f16[1,38400]{1,0} %param_1.39)
  %bitcast.102 = f32[2,150,8,16]{3,1,2,0} bitcast(f32[1,38400]{1,0} %convert.22)
  %slice.20 = f32[1,150,8,16]{3,1,2,0} slice(f32[2,150,8,16]{3,1,2,0} %bitcast.102), slice={[0:1], [0:150], [0:8], [0:16]}
  %copy.38 = f32[1,150,8,16]{3,2,1,0} copy(f32[1,150,8,16]{3,1,2,0} %slice.20)
  %bitcast.66 = f32[1,1,150,128]{3,2,0,1} bitcast(f32[1,150,8,16]{3,2,1,0} %copy.38)
  %param_0.28 = f32[1,150,128]{2,1,0} parameter(0)
  %bitcast.65 = f32[1,1,150,128]{3,2,0,1} bitcast(f32[1,150,128]{2,1,0} %param_0.28)
  %concatenate.2 = f32[2,1,150,128]{3,2,0,1} concatenate(f32[1,1,150,128]{3,2,0,1} %bitcast.66, f32[1,1,150,128]{3,2,0,1} %bitcast.65), dimensions={0}
  ROOT %bitcast.64 = f32[2,150,128]{2,1,0} bitcast(f32[2,1,150,128]{3,2,0,1} %concatenate.2)
}

%fused_computation.11 (param_0.30: f32[8,32], param_1.22: f32[200,256]) -> f32[8,200,32] {
  %param_1.22 = f32[200,256]{1,0} parameter(1)
  %reshape.33 = f32[200,8,32]{2,0,1} reshape(f32[200,256]{1,0} %param_1.22)
  %bitcast.67 = f32[8,200,32]{2,1,0} bitcast(f32[200,8,32]{2,0,1} %reshape.33)
  %param_0.30 = f32[8,32]{1,0} parameter(0)
  %broadcast.11 = f32[8,200,32]{2,1,0} broadcast(f32[8,32]{1,0} %param_0.30), dimensions={0,2}
  ROOT %add.6 = f32[8,200,32]{2,1,0} add(f32[8,200,32]{2,1,0} %bitcast.67, f32[8,200,32]{2,1,0} %broadcast.11)
}

%fused_computation.12 (param_0.33: f32[8,200,24]) -> f32[200,192] {
  %param_0.33 = f32[8,200,24]{2,1,0} parameter(0)
  %bitcast.69 = f32[200,2,4,24]{3,0,2,1} bitcast(f32[8,200,24]{2,1,0} %param_0.33)
  %copy.30 = f32[200,2,4,24]{3,2,1,0} copy(f32[200,2,4,24]{3,0,2,1} %bitcast.69)
  ROOT %bitcast.68 = f32[200,192]{1,0} bitcast(f32[200,2,4,24]{3,2,1,0} %copy.30)
}

%fused_computation.13 (param_0.35: f32[8,200,50], param_1.25: f32[8,200]) -> f32[8,200,50] {
  %constant_8 = f32[] constant(1e-07)
  %broadcast.13 = f32[8,200,50]{2,1,0} broadcast(f32[] %constant_8), dimensions={}
  %param_0.35 = f32[8,200,50]{2,1,0} parameter(0)
  %param_1.25 = f32[8,200]{1,0} parameter(1)
  %broadcast.12 = f32[8,200,50]{2,1,0} broadcast(f32[8,200]{1,0} %param_1.25), dimensions={0,1}
  %divide.2 = f32[8,200,50]{2,1,0} divide(f32[8,200,50]{2,1,0} %param_0.35, f32[8,200,50]{2,1,0} %broadcast.12)
  ROOT %add.7 = f32[8,200,50]{2,1,0} add(f32[8,200,50]{2,1,0} %broadcast.13, f32[8,200,50]{2,1,0} %divide.2)
}

%fused_computation.15 (param_0.40: f32[2,50,96]) -> f32[8,50,24] {
  %param_0.40 = f32[2,50,96]{2,1,0} parameter(0)
  %bitcast.71 = f32[2,4,50,24]{3,1,2,0} bitcast(f32[2,50,96]{2,1,0} %param_0.40)
  %copy.31 = f32[2,4,50,24]{3,2,1,0} copy(f32[2,4,50,24]{3,1,2,0} %bitcast.71)
  ROOT %bitcast.70 = f32[8,50,24]{2,1,0} bitcast(f32[2,4,50,24]{3,2,1,0} %copy.31)
}

%Sum_5-reduction.121 (x.122: f32[], y.123: f32[]) -> f32[] {
  %x.122 = f32[] parameter(0)
  %y.123 = f32[] parameter(1)
  ROOT %add.124 = f32[] add(f32[] %x.122, f32[] %y.123)
}

%fused_computation.17 (param_0.99: f32[200,6,16]) -> f32[1,96] {
  %param_0.99 = f32[200,6,16]{2,1,0} parameter(0)
  %bitcast.73 = f32[1,200,96]{2,1,0} bitcast(f32[200,6,16]{2,1,0} %param_0.99)
  %constant_9 = f32[] constant(0)
  ROOT %reduce.0 = f32[1,96]{1,0} reduce(f32[1,200,96]{2,1,0} %bitcast.73, f32[] %constant_9), dimensions={1}, to_apply=%Sum_5-reduction.121
}

%fused_computation.18 (param_0.49: f16[1,19200]) -> f32[200,6,16] {
  %param_0.49 = f16[1,19200]{1,0} parameter(0)
  %convert.13 = f32[1,19200]{1,0} convert(f16[1,19200]{1,0} %param_0.49)
  %bitcast.74 = f32[200,6,16]{2,0,1} bitcast(f32[1,19200]{1,0} %convert.13)
  ROOT %copy.32 = f32[200,6,16]{2,1,0} copy(f32[200,6,16]{2,0,1} %bitcast.74)
}

%fused_computation.27 (param_0.72: f32[200,30,2,4]) -> (f32[200,3,8], f32[200,3,8]) {
  %param_0.72 = f32[200,30,2,4]{3,2,1,0} parameter(0)
  %bitcast.84 = f32[200,30,8]{2,1,0} bitcast(f32[200,30,2,4]{3,2,1,0} %param_0.72)
  %slice.6 = f32[200,3,8]{2,1,0} slice(f32[200,30,8]{2,1,0} %bitcast.84), slice={[0:200], [24:27], [0:8]}
  %slice.4.clone.1 = f32[200,3,8]{2,1,0} slice(f32[200,30,8]{2,1,0} %bitcast.84), slice={[0:200], [27:30], [0:8]}
  ROOT %tuple.3 = (f32[200,3,8]{2,1,0}, f32[200,3,8]{2,1,0}) tuple(f32[200,3,8]{2,1,0} %slice.6, f32[200,3,8]{2,1,0} %slice.4.clone.1)
}

%fused_computation.37 (param_0.92: f32[200,14,2,4]) -> (f32[200,2,8], f32[200,2,8], f32[200,2,8], f32[200,2,8]) {
  %param_0.92 = f32[200,14,2,4]{3,2,1,0} parameter(0)
  %bitcast.94 = f32[200,14,8]{2,1,0} bitcast(f32[200,14,2,4]{3,2,1,0} %param_0.92)
  %slice.16 = f32[200,2,8]{2,1,0} slice(f32[200,14,8]{2,1,0} %bitcast.94), slice={[0:200], [0:2], [0:8]}
  %slice.13.clone.1 = f32[200,2,8]{2,1,0} slice(f32[200,14,8]{2,1,0} %bitcast.94), slice={[0:200], [2:4], [0:8]}
  %slice.10.clone.1 = f32[200,2,8]{2,1,0} slice(f32[200,14,8]{2,1,0} %bitcast.94), slice={[0:200], [4:6], [0:8]}
  %slice.7.clone.1 = f32[200,2,8]{2,1,0} slice(f32[200,14,8]{2,1,0} %bitcast.94), slice={[0:200], [6:8], [0:8]}
  ROOT %tuple.6 = (f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}) tuple(f32[200,2,8]{2,1,0} %slice.16, f32[200,2,8]{2,1,0} %slice.13.clone.1, f32[200,2,8]{2,1,0} %slice.10.clone.1, f32[200,2,8]{2,1,0} %slice.7.clone.1)
}

%fused_computation.38 (param_0.94: f32[200,4,2,4]) -> (f32[200,1,8], f32[200,1,8], f32[200,1,8], f32[200,1,8]) {
  %param_0.94 = f32[200,4,2,4]{3,2,1,0} parameter(0)
  %bitcast.95 = f32[200,4,8]{2,1,0} bitcast(f32[200,4,2,4]{3,2,1,0} %param_0.94)
  %slice.17 = f32[200,1,8]{2,1,0} slice(f32[200,4,8]{2,1,0} %bitcast.95), slice={[0:200], [0:1], [0:8]}
  %slice.11.clone.1 = f32[200,1,8]{2,1,0} slice(f32[200,4,8]{2,1,0} %bitcast.95), slice={[0:200], [2:3], [0:8]}
  %slice.8.clone.1 = f32[200,1,8]{2,1,0} slice(f32[200,4,8]{2,1,0} %bitcast.95), slice={[0:200], [3:4], [0:8]}
  %slice.14.clone.1 = f32[200,1,8]{2,1,0} slice(f32[200,4,8]{2,1,0} %bitcast.95), slice={[0:200], [1:2], [0:8]}
  ROOT %tuple.9 = (f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}) tuple(f32[200,1,8]{2,1,0} %slice.17, f32[200,1,8]{2,1,0} %slice.11.clone.1, f32[200,1,8]{2,1,0} %slice.8.clone.1, f32[200,1,8]{2,1,0} %slice.14.clone.1)
}

%fused_computation.39 (param_0.96: f32[200,30,2,4]) -> (f32[200,6,8], f32[200,6,8], f32[200,6,8], f32[200,6,8]) {
  %param_0.96 = f32[200,30,2,4]{3,2,1,0} parameter(0)
  %bitcast.96 = f32[200,30,8]{2,1,0} bitcast(f32[200,30,2,4]{3,2,1,0} %param_0.96)
  %slice.18 = f32[200,6,8]{2,1,0} slice(f32[200,30,8]{2,1,0} %bitcast.96), slice={[0:200], [0:6], [0:8]}
  %slice.15.clone.1 = f32[200,6,8]{2,1,0} slice(f32[200,30,8]{2,1,0} %bitcast.96), slice={[0:200], [6:12], [0:8]}
  %slice.9.clone.1 = f32[200,6,8]{2,1,0} slice(f32[200,30,8]{2,1,0} %bitcast.96), slice={[0:200], [18:24], [0:8]}
  %slice.12.clone.1 = f32[200,6,8]{2,1,0} slice(f32[200,30,8]{2,1,0} %bitcast.96), slice={[0:200], [12:18], [0:8]}
  ROOT %tuple.2 = (f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}) tuple(f32[200,6,8]{2,1,0} %slice.18, f32[200,6,8]{2,1,0} %slice.15.clone.1, f32[200,6,8]{2,1,0} %slice.9.clone.1, f32[200,6,8]{2,1,0} %slice.12.clone.1)
}

%add_float_.150 (x.151: f32[], y.152: f32[]) -> f32[] {
  %x.151 = f32[] parameter(0)
  %y.152 = f32[] parameter(1)
  ROOT %add.153 = f32[] add(f32[] %x.151, f32[] %y.152)
}

%fused_computation.40 (param_0.126: f32[4,200,200], param_1.77: f32[4,200]) -> (f32[4,200], f32[4,200,200]) {
  %param_0.126 = f32[4,200,200]{2,1,0} parameter(0)
  %param_1.77 = f32[4,200]{1,0} parameter(1)
  %broadcast.6.clone.1 = f32[4,200,200]{2,1,0} broadcast(f32[4,200]{1,0} %param_1.77), dimensions={0,1}
  %subtract.0.clone.1 = f32[4,200,200]{2,1,0} subtract(f32[4,200,200]{2,1,0} %param_0.126, f32[4,200,200]{2,1,0} %broadcast.6.clone.1)
  %exponential.0.clone.1 = f32[4,200,200]{2,1,0} exponential(f32[4,200,200]{2,1,0} %subtract.0.clone.1)
  %constant_11 = f32[] constant(0)
  %reduce.2 = f32[4,200]{1,0} reduce(f32[4,200,200]{2,1,0} %exponential.0.clone.1, f32[] %constant_11), dimensions={2}, to_apply=%add_float_.150
  ROOT %tuple.10 = (f32[4,200]{1,0}, f32[4,200,200]{2,1,0}) tuple(f32[4,200]{1,0} %reduce.2, f32[4,200,200]{2,1,0} %exponential.0.clone.1)
}

%add_float_.259 (x.260: f32[], y.261: f32[]) -> f32[] {
  %x.260 = f32[] parameter(0)
  %y.261 = f32[] parameter(1)
  ROOT %add.262 = f32[] add(f32[] %x.260, f32[] %y.261)
}

%fused_computation.41 (param_0.127: f32[8,200,150], param_1.78: f32[8,200]) -> (f32[8,200], f32[8,200,150]) {
  %param_0.127 = f32[8,200,150]{2,1,0} parameter(0)
  %param_1.78 = f32[8,200]{1,0} parameter(1)
  %broadcast.10.clone.1 = f32[8,200,150]{2,1,0} broadcast(f32[8,200]{1,0} %param_1.78), dimensions={0,1}
  %subtract.1.clone.1 = f32[8,200,150]{2,1,0} subtract(f32[8,200,150]{2,1,0} %param_0.127, f32[8,200,150]{2,1,0} %broadcast.10.clone.1)
  %exponential.1.clone.1 = f32[8,200,150]{2,1,0} exponential(f32[8,200,150]{2,1,0} %subtract.1.clone.1)
  %constant_12 = f32[] constant(0)
  %reduce.3 = f32[8,200]{1,0} reduce(f32[8,200,150]{2,1,0} %exponential.1.clone.1, f32[] %constant_12), dimensions={2}, to_apply=%add_float_.259
  ROOT %tuple.11 = (f32[8,200]{1,0}, f32[8,200,150]{2,1,0}) tuple(f32[8,200]{1,0} %reduce.3, f32[8,200,150]{2,1,0} %exponential.1.clone.1)
}

%Sum_3-reduction.220 (x.221: f32[], y.222: f32[]) -> f32[] {
  %x.221 = f32[] parameter(0)
  %y.222 = f32[] parameter(1)
  ROOT %add.223 = f32[] add(f32[] %x.221, f32[] %y.222)
}

%Sum_2-reduction.209 (x.210: f32[], y.211: f32[]) -> f32[] {
  %x.210 = f32[] parameter(0)
  %y.211 = f32[] parameter(1)
  ROOT %add.212 = f32[] add(f32[] %x.210, f32[] %y.211)
}

%fused_computation.42 (param_0.128: f16[1,38400]) -> (f32[1,128], f32[1,150,128], f32[1,128]) {
  %param_0.128 = f16[1,38400]{1,0} parameter(0)
  %convert.18.clone.1 = f32[1,38400]{1,0} convert(f16[1,38400]{1,0} %param_0.128)
  %bitcast.98.clone.1 = f32[2,150,8,16]{3,1,2,0} bitcast(f32[1,38400]{1,0} %convert.18.clone.1)
  %copy.34.clone.1 = f32[2,150,8,16]{3,2,1,0} copy(f32[2,150,8,16]{3,1,2,0} %bitcast.98.clone.1)
  %bitcast.77.clone.1 = f32[2,150,128]{2,1,0} bitcast(f32[2,150,8,16]{3,2,1,0} %copy.34.clone.1)
  %slice.2.clone.1 = f32[1,150,128]{2,1,0} slice(f32[2,150,128]{2,1,0} %bitcast.77.clone.1), slice={[1:2], [0:150], [0:128]}
  %constant_13 = f32[] constant(0)
  %reduce.4 = f32[1,128]{1,0} reduce(f32[1,150,128]{2,1,0} %slice.2.clone.1, f32[] %constant_13), dimensions={1}, to_apply=%Sum_3-reduction.220
  %slice.22.clone.1 = f32[1,150,8,16]{3,1,2,0} slice(f32[2,150,8,16]{3,1,2,0} %bitcast.98.clone.1), slice={[0:1], [0:150], [0:8], [0:16]}
  %copy.40.clone.1 = f32[1,150,8,16]{3,2,1,0} copy(f32[1,150,8,16]{3,1,2,0} %slice.22.clone.1)
  %bitcast.78.clone.1 = f32[1,150,128]{2,1,0} bitcast(f32[1,150,8,16]{3,2,1,0} %copy.40.clone.1)
  %reduce.1.clone.1 = f32[1,128]{1,0} reduce(f32[1,150,128]{2,1,0} %bitcast.78.clone.1, f32[] %constant_13), dimensions={1}, to_apply=%Sum_2-reduction.209
  ROOT %tuple.16 = (f32[1,128]{1,0}, f32[1,150,128]{2,1,0}, f32[1,128]{1,0}) tuple(f32[1,128]{1,0} %reduce.4, f32[1,150,128]{2,1,0} %slice.2.clone.1, f32[1,128]{1,0} %reduce.1.clone.1)
}

%add_float_.181 (x.182: f32[], y.183: f32[]) -> f32[] {
  %x.182 = f32[] parameter(0)
  %y.183 = f32[] parameter(1)
  ROOT %add.184 = f32[] add(f32[] %x.182, f32[] %y.183)
}

%fused_computation.43 (param_0.129: f32[8,200,50], param_1.79: f32[8,200]) -> (f32[8,200], f32[8,200,50]) {
  %param_0.129 = f32[8,200,50]{2,1,0} parameter(0)
  %param_1.79 = f32[8,200]{1,0} parameter(1)
  %broadcast.14.clone.1 = f32[8,200,50]{2,1,0} broadcast(f32[8,200]{1,0} %param_1.79), dimensions={0,1}
  %subtract.2.clone.1 = f32[8,200,50]{2,1,0} subtract(f32[8,200,50]{2,1,0} %param_0.129, f32[8,200,50]{2,1,0} %broadcast.14.clone.1)
  %exponential.2.clone.1 = f32[8,200,50]{2,1,0} exponential(f32[8,200,50]{2,1,0} %subtract.2.clone.1)
  %constant_14 = f32[] constant(0)
  %reduce.5 = f32[8,200]{1,0} reduce(f32[8,200,50]{2,1,0} %exponential.2.clone.1, f32[] %constant_14), dimensions={2}, to_apply=%add_float_.181
  ROOT %tuple.13 = (f32[8,200]{1,0}, f32[8,200,50]{2,1,0}) tuple(f32[8,200]{1,0} %reduce.5, f32[8,200,50]{2,1,0} %exponential.2.clone.1)
}

%Sum_4-reduction.100 (x.101: f32[], y.102: f32[]) -> f32[] {
  %x.101 = f32[] parameter(0)
  %y.102 = f32[] parameter(1)
  ROOT %add.103 = f32[] add(f32[] %x.101, f32[] %y.102)
}

%fused_computation.44 (param_0.130: f16[1,4800]) -> (f32[1,96], f32[1,50,96]) {
  %param_0.130 = f16[1,4800]{1,0} parameter(0)
  %convert.14.clone.1 = f32[1,4800]{1,0} convert(f16[1,4800]{1,0} %param_0.130)
  %bitcast.76.clone.1 = f32[6,50,16]{2,1,0} bitcast(f32[1,4800]{1,0} %convert.14.clone.1)
  %copy.33.clone.1 = f32[6,50,16]{2,0,1} copy(f32[6,50,16]{2,1,0} %bitcast.76.clone.1)
  %bitcast.75.clone.1 = f32[1,50,96]{2,1,0} bitcast(f32[6,50,16]{2,0,1} %copy.33.clone.1)
  %constant_15 = f32[] constant(0)
  %reduce.6 = f32[1,96]{1,0} reduce(f32[1,50,96]{2,1,0} %bitcast.75.clone.1, f32[] %constant_15), dimensions={1}, to_apply=%Sum_4-reduction.100
  ROOT %tuple.14 = (f32[1,96]{1,0}, f32[1,50,96]{2,1,0}) tuple(f32[1,96]{1,0} %reduce.6, f32[1,50,96]{2,1,0} %bitcast.75.clone.1)
}

%Sum_1-reduction.88 (x.89: f32[], y.90: f32[]) -> f32[] {
  %x.89 = f32[] parameter(0)
  %y.90 = f32[] parameter(1)
  ROOT %add.91 = f32[] add(f32[] %x.89, f32[] %y.90)
}

%fused_computation.45 (param_0.131: f16[1,4800]) -> (f32[1,96], f32[1,50,96]) {
  %param_0.131 = f16[1,4800]{1,0} parameter(0)
  %convert.16.clone.1 = f32[1,4800]{1,0} convert(f16[1,4800]{1,0} %param_0.131)
  %bitcast.81.clone.1 = f32[6,50,16]{2,1,0} bitcast(f32[1,4800]{1,0} %convert.16.clone.1)
  %copy.36.clone.1 = f32[6,50,16]{2,0,1} copy(f32[6,50,16]{2,1,0} %bitcast.81.clone.1)
  %bitcast.80.clone.1 = f32[1,50,96]{2,1,0} bitcast(f32[6,50,16]{2,0,1} %copy.36.clone.1)
  %constant_16 = f32[] constant(0)
  %reduce.7 = f32[1,96]{1,0} reduce(f32[1,50,96]{2,1,0} %bitcast.80.clone.1, f32[] %constant_16), dimensions={1}, to_apply=%Sum_1-reduction.88
  ROOT %tuple.15 = (f32[1,96]{1,0}, f32[1,50,96]{2,1,0}) tuple(f32[1,96]{1,0} %reduce.7, f32[1,50,96]{2,1,0} %bitcast.80.clone.1)
}

ENTRY %cluster_0__XlaCompiledKernel_true__XlaNumConstantArgs_52__XlaNumResourceArgs_0_.285 (arg0.1: f32[200,96], arg1.2: f32[16,200,24], arg2.3: f32[200,4,2,4], arg3.4: f32[200,30,2,4], arg4.5: f32[200,14,2,4], arg5.6: f32[4,200,24,1], arg6.7: f32[200,1852], arg7.8: f32[200,96], arg8.9: f16[1,1728], arg9.10: f16[1,4800], arg10.11: f16[1,19200], arg11.12: f16[1,4800], arg12.13: f16[1,38400]) -> f32[200,5244] {
  %constant_279 = f32[5244]{0} constant({...})
  %arg6.7 = f32[200,1852]{1,0} parameter(6), parameter_replication={false}
  %arg7.8 = f32[200,96]{1,0} parameter(7), parameter_replication={false}
  %arg1.2 = f32[16,200,24]{2,1,0} parameter(1), parameter_replication={false}
  %slice.39 = f32[8,200,24]{2,1,0} slice(f32[16,200,24]{2,1,0} %arg1.2), slice={[0:8], [0:200], [0:24]}
  %arg11.12 = f16[1,4800]{1,0} parameter(11), parameter_replication={false}
  %fusion.45 = (f32[1,96]{1,0}, f32[1,50,96]{2,1,0}) fusion(f16[1,4800]{1,0} %arg11.12), kind=kInput, calls=%fused_computation.45
  %get-tuple-element.25 = f32[1,50,96]{2,1,0} get-tuple-element((f32[1,96]{1,0}, f32[1,50,96]{2,1,0}) %fusion.45), index=1
  %arg9.10 = f16[1,4800]{1,0} parameter(9), parameter_replication={false}
  %fusion.44 = (f32[1,96]{1,0}, f32[1,50,96]{2,1,0}) fusion(f16[1,4800]{1,0} %arg9.10), kind=kInput, calls=%fused_computation.44
  %get-tuple-element.23 = f32[1,50,96]{2,1,0} get-tuple-element((f32[1,96]{1,0}, f32[1,50,96]{2,1,0}) %fusion.44), index=1
  %concatenate.106 = f32[2,50,96]{2,1,0} concatenate(f32[1,50,96]{2,1,0} %get-tuple-element.25, f32[1,50,96]{2,1,0} %get-tuple-element.23), dimensions={0}
  %constant_107 = f32[2,96,96]{2,1,0} constant({...})
  %constant = f32[2,96]{1,0} constant({...})
  %broadcast.112 = f32[2,50,96]{2,1,0} broadcast(f32[2,96]{1,0} %constant), dimensions={0,2}
  %custom-call.1 = f32[2,50,96]{2,1,0} custom-call(f32[2,50,96]{2,1,0} %concatenate.106, f32[2,96,96]{2,1,0} %constant_107, f32[2,50,96]{2,1,0} %broadcast.112), custom_call_target="__cublas$gemm", backend_config="{\"alphaReal\":1,\"beta\":1,\"dotDimensionNumbers\":{\"lhsContractingDimensions\":[\"2\"],\"rhsContractingDimensions\":[\"1\"],\"lhsBatchDimensions\":[\"0\"],\"rhsBatchDimensions\":[\"0\"]},\"batchSize\":\"2\"}"
  %fusion.15 = f32[8,50,24]{2,1,0} fusion(f32[2,50,96]{2,1,0} %custom-call.1), kind=kLoop, calls=%fused_computation.15
  %custom-call.2 = f32[8,200,50]{2,1,0} custom-call(f32[8,200,24]{2,1,0} %slice.39, f32[8,50,24]{2,1,0} %fusion.15), custom_call_target="__cublas$gemm", backend_config="{\"alphaReal\":1,\"dotDimensionNumbers\":{\"lhsContractingDimensions\":[\"2\"],\"rhsContractingDimensions\":[\"2\"],\"lhsBatchDimensions\":[\"0\"],\"rhsBatchDimensions\":[\"0\"]},\"batchSize\":\"8\"}"
  %constant_139 = f32[] constant(-inf)
  %reduce.175 = f32[8,200]{1,0} reduce(f32[8,200,50]{2,1,0} %custom-call.2, f32[] %constant_139), dimensions={2}, to_apply=%max_float_.171
  %fusion.43 = (f32[8,200]{1,0}, f32[8,200,50]{2,1,0}) fusion(f32[8,200,50]{2,1,0} %custom-call.2, f32[8,200]{1,0} %reduce.175), kind=kInput, calls=%fused_computation.43
  %get-tuple-element.21 = f32[8,200,50]{2,1,0} get-tuple-element((f32[8,200]{1,0}, f32[8,200,50]{2,1,0}) %fusion.43), index=1
  %get-tuple-element.20 = f32[8,200]{1,0} get-tuple-element((f32[8,200]{1,0}, f32[8,200,50]{2,1,0}) %fusion.43), index=0
  %fusion.13 = f32[8,200,50]{2,1,0} fusion(f32[8,200,50]{2,1,0} %get-tuple-element.21, f32[8,200]{1,0} %get-tuple-element.20), kind=kLoop, calls=%fused_computation.13
  %custom-call.3 = f32[8,200,24]{2,1,0} custom-call(f32[8,200,50]{2,1,0} %fusion.13, f32[8,50,24]{2,1,0} %fusion.15), custom_call_target="__cublas$gemm", backend_config="{\"alphaReal\":1,\"dotDimensionNumbers\":{\"lhsContractingDimensions\":[\"2\"],\"rhsContractingDimensions\":[\"1\"],\"lhsBatchDimensions\":[\"0\"],\"rhsBatchDimensions\":[\"0\"]},\"batchSize\":\"8\"}"
  %fusion.12 = f32[200,192]{1,0} fusion(f32[8,200,24]{2,1,0} %custom-call.3), kind=kLoop, calls=%fused_computation.12
  %slice.197 = f32[200,96]{1,0} slice(f32[200,192]{1,0} %fusion.12), slice={[0:200], [0:96]}
  %slice.199 = f32[200,96]{1,0} slice(f32[200,192]{1,0} %fusion.12), slice={[0:200], [96:192]}
  %arg3.4 = f32[200,30,2,4]{3,2,1,0} parameter(3), parameter_replication={false}
  %fusion.39 = (f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}) fusion(f32[200,30,2,4]{3,2,1,0} %arg3.4), kind=kLoop, calls=%fused_computation.39
  %get-tuple-element = f32[200,6,8]{2,1,0} get-tuple-element((f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}) %fusion.39), index=0
  %arg2.3 = f32[200,4,2,4]{3,2,1,0} parameter(2), parameter_replication={false}
  %fusion.38 = (f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}) fusion(f32[200,4,2,4]{3,2,1,0} %arg2.3), kind=kLoop, calls=%fused_computation.38
  %get-tuple-element.10 = f32[200,1,8]{2,1,0} get-tuple-element((f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}) %fusion.38), index=0
  %arg4.5 = f32[200,14,2,4]{3,2,1,0} parameter(4), parameter_replication={false}
  %fusion.37 = (f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}) fusion(f32[200,14,2,4]{3,2,1,0} %arg4.5), kind=kLoop, calls=%fused_computation.37
  %get-tuple-element.6 = f32[200,2,8]{2,1,0} get-tuple-element((f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}) %fusion.37), index=0
  %get-tuple-element.1 = f32[200,6,8]{2,1,0} get-tuple-element((f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}) %fusion.39), index=1
  %get-tuple-element.13 = f32[200,1,8]{2,1,0} get-tuple-element((f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}) %fusion.38), index=3
  %get-tuple-element.7 = f32[200,2,8]{2,1,0} get-tuple-element((f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}) %fusion.37), index=1
  %get-tuple-element.3 = f32[200,6,8]{2,1,0} get-tuple-element((f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}) %fusion.39), index=3
  %get-tuple-element.11 = f32[200,1,8]{2,1,0} get-tuple-element((f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}) %fusion.38), index=1
  %get-tuple-element.8 = f32[200,2,8]{2,1,0} get-tuple-element((f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}) %fusion.37), index=2
  %get-tuple-element.2 = f32[200,6,8]{2,1,0} get-tuple-element((f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}, f32[200,6,8]{2,1,0}) %fusion.39), index=2
  %get-tuple-element.12 = f32[200,1,8]{2,1,0} get-tuple-element((f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}, f32[200,1,8]{2,1,0}) %fusion.38), index=2
  %get-tuple-element.9 = f32[200,2,8]{2,1,0} get-tuple-element((f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}, f32[200,2,8]{2,1,0}) %fusion.37), index=3
  %fusion.27 = (f32[200,3,8]{2,1,0}, f32[200,3,8]{2,1,0}) fusion(f32[200,30,2,4]{3,2,1,0} %arg3.4), kind=kLoop, calls=%fused_computation.27
  %get-tuple-element.4 = f32[200,3,8]{2,1,0} get-tuple-element((f32[200,3,8]{2,1,0}, f32[200,3,8]{2,1,0}) %fusion.27), index=0
  %get-tuple-element.5 = f32[200,3,8]{2,1,0} get-tuple-element((f32[200,3,8]{2,1,0}, f32[200,3,8]{2,1,0}) %fusion.27), index=1
  %bitcast.45 = f32[200,14,8]{2,1,0} bitcast(f32[200,14,2,4]{3,2,1,0} %arg4.5)
  %get-tuple-element.24 = f32[1,96]{1,0} get-tuple-element((f32[1,96]{1,0}, f32[1,50,96]{2,1,0}) %fusion.45), index=0
  %arg12.13 = f16[1,38400]{1,0} parameter(12), parameter_replication={false}
  %fusion.42 = (f32[1,128]{1,0}, f32[1,150,128]{2,1,0}, f32[1,128]{1,0}) fusion(f16[1,38400]{1,0} %arg12.13), kind=kInput, calls=%fused_computation.42
  %get-tuple-element.26 = f32[1,128]{1,0} get-tuple-element((f32[1,128]{1,0}, f32[1,150,128]{2,1,0}, f32[1,128]{1,0}) %fusion.42), index=2
  %get-tuple-element.18 = f32[1,128]{1,0} get-tuple-element((f32[1,128]{1,0}, f32[1,150,128]{2,1,0}, f32[1,128]{1,0}) %fusion.42), index=0
  %get-tuple-element.22 = f32[1,96]{1,0} get-tuple-element((f32[1,96]{1,0}, f32[1,50,96]{2,1,0}) %fusion.44), index=0
  %arg10.11 = f16[1,19200]{1,0} parameter(10), parameter_replication={false}
  %fusion.18 = f32[200,6,16]{2,1,0} fusion(f16[1,19200]{1,0} %arg10.11), kind=kLoop, calls=%fused_computation.18
  %fusion.17 = f32[1,96]{1,0} fusion(f32[200,6,16]{2,1,0} %fusion.18), kind=kInput, calls=%fused_computation.17
  %arg8.9 = f16[1,1728]{1,0} parameter(8), parameter_replication={false}
  %constant_276 = f32[5244]{0} constant({...})
  %constant_3 = f32[8,32]{1,0} constant({...})
  %arg0.1 = f32[200,96]{1,0} parameter(0), parameter_replication={false}
  %constant_2 = f32[96,256]{1,0} constant({...})
  %custom-call.4 = f32[200,256]{1,0} custom-call(f32[200,96]{1,0} %arg0.1, f32[96,256]{1,0} %constant_2), custom_call_target="__cublas$gemm", backend_config="{\"alphaReal\":1,\"dotDimensionNumbers\":{\"lhsContractingDimensions\":[\"1\"],\"rhsContractingDimensions\":[\"0\"]},\"batchSize\":\"1\"}"
  %fusion.11 = f32[8,200,32]{2,1,0} fusion(f32[8,32]{1,0} %constant_3, f32[200,256]{1,0} %custom-call.4), kind=kLoop, calls=%fused_computation.11
  %get-tuple-element.19 = f32[1,150,128]{2,1,0} get-tuple-element((f32[1,128]{1,0}, f32[1,150,128]{2,1,0}, f32[1,128]{1,0}) %fusion.42), index=1
  %fusion.10 = f32[2,150,128]{2,1,0} fusion(f32[1,150,128]{2,1,0} %get-tuple-element.19, f16[1,38400]{1,0} %arg12.13), kind=kLoop, calls=%fused_computation.10
  %constant_236 = f32[2,128,128]{2,1,0} constant({...})
  %constant_4 = f32[2,128]{1,0} constant({...})
  %broadcast.241 = f32[2,150,128]{2,1,0} broadcast(f32[2,128]{1,0} %constant_4), dimensions={0,2}
  %custom-call.6 = f32[2,150,128]{2,1,0} custom-call(f32[2,150,128]{2,1,0} %fusion.10, f32[2,128,128]{2,1,0} %constant_236, f32[2,150,128]{2,1,0} %broadcast.241), custom_call_target="__cublas$gemm", backend_config="{\"alphaReal\":1,\"beta\":1,\"dotDimensionNumbers\":{\"lhsContractingDimensions\":[\"2\"],\"rhsContractingDimensions\":[\"1\"],\"lhsBatchDimensions\":[\"0\"],\"rhsBatchDimensions\":[\"0\"]},\"batchSize\":\"2\"}"
  %fusion.9 = f32[8,150,32]{2,1,0} fusion(f32[2,150,128]{2,1,0} %custom-call.6), kind=kLoop, calls=%fused_computation.9
  %custom-call.7 = f32[8,200,150]{2,1,0} custom-call(f32[8,200,32]{2,1,0} %fusion.11, f32[8,150,32]{2,1,0} %fusion.9), custom_call_target="__cublas$gemm", backend_config="{\"alphaReal\":1,\"dotDimensionNumbers\":{\"lhsContractingDimensions\":[\"2\"],\"rhsContractingDimensions\":[\"2\"],\"lhsBatchDimensions\":[\"0\"],\"rhsBatchDimensions\":[\"0\"]},\"batchSize\":\"8\"}"
  %reduce.253 = f32[8,200]{1,0} reduce(f32[8,200,150]{2,1,0} %custom-call.7, f32[] %constant_139), dimensions={2}, to_apply=%max_float_.249
  %fusion.41 = (f32[8,200]{1,0}, f32[8,200,150]{2,1,0}) fusion(f32[8,200,150]{2,1,0} %custom-call.7, f32[8,200]{1,0} %reduce.253), kind=kInput, calls=%fused_computation.41
  %get-tuple-element.17 = f32[8,200,150]{2,1,0} get-tuple-element((f32[8,200]{1,0}, f32[8,200,150]{2,1,0}) %fusion.41), index=1
  %get-tuple-element.16 = f32[8,200]{1,0} get-tuple-element((f32[8,200]{1,0}, f32[8,200,150]{2,1,0}) %fusion.41), index=0
  %fusion.7 = f32[8,200,150]{2,1,0} fusion(f32[8,200,150]{2,1,0} %get-tuple-element.17, f32[8,200]{1,0} %get-tuple-element.16), kind=kLoop, calls=%fused_computation.7
  %custom-call.8 = f32[8,200,32]{2,1,0} custom-call(f32[8,200,150]{2,1,0} %fusion.7, f32[8,150,32]{2,1,0} %fusion.9), custom_call_target="__cublas$gemm", backend_config="{\"alphaReal\":1,\"dotDimensionNumbers\":{\"lhsContractingDimensions\":[\"2\"],\"rhsContractingDimensions\":[\"1\"],\"lhsBatchDimensions\":[\"0\"],\"rhsBatchDimensions\":[\"0\"]},\"batchSize\":\"8\"}"
  %arg5.6 = f32[4,200,24,1]{3,2,1,0} parameter(5), parameter_replication={false}
  %slice.37 = f32[4,200,24]{2,1,0} slice(f32[16,200,24]{2,1,0} %arg1.2), slice={[12:16], [0:200], [0:24]}
  %constant_5 = f32[1,96]{1,0} constant({...})
  %bitcast.36 = f32[200,96]{1,0} bitcast(f32[200,6,16]{2,1,0} %fusion.18)
  %constant_127 = f32[96,96]{1,0} constant({...})
  %custom-call.9 = f32[200,96]{1,0} custom-call(f32[200,96]{1,0} %bitcast.36, f32[96,96]{1,0} %constant_127), custom_call_target="__cublas$gemm", backend_config="{\"alphaReal\":1,\"dotDimensionNumbers\":{\"lhsContractingDimensions\":[\"1\"],\"rhsContractingDimensions\":[\"0\"]},\"batchSize\":\"1\"}"
  %fusion.4 = f32[4,200,24]{2,1,0} fusion(f32[1,96]{1,0} %constant_5, f32[200,96]{1,0} %custom-call.9), kind=kLoop, calls=%fused_computation.4
  %custom-call.10 = f32[4,200,200]{2,1,0} custom-call(f32[4,200,24]{2,1,0} %slice.37, f32[4,200,24]{2,1,0} %fusion.4), custom_call_target="__cublas$gemm", backend_config="{\"alphaReal\":1,\"dotDimensionNumbers\":{\"lhsContractingDimensions\":[\"2\"],\"rhsContractingDimensions\":[\"2\"],\"lhsBatchDimensions\":[\"0\"],\"rhsBatchDimensions\":[\"0\"]},\"batchSize\":\"4\"}"
  %reduce.144 = f32[4,200]{1,0} reduce(f32[4,200,200]{2,1,0} %custom-call.10, f32[] %constant_139), dimensions={2}, to_apply=%max_float_.140
  %fusion.40 = (f32[4,200]{1,0}, f32[4,200,200]{2,1,0}) fusion(f32[4,200,200]{2,1,0} %custom-call.10, f32[4,200]{1,0} %reduce.144), kind=kInput, calls=%fused_computation.40
  %get-tuple-element.15 = f32[4,200,200]{2,1,0} get-tuple-element((f32[4,200]{1,0}, f32[4,200,200]{2,1,0}) %fusion.40), index=1
  %get-tuple-element.14 = f32[4,200]{1,0} get-tuple-element((f32[4,200]{1,0}, f32[4,200,200]{2,1,0}) %fusion.40), index=0
  %fusion.2 = f32[4,200,200]{2,1,0} fusion(f32[4,200,200]{2,1,0} %get-tuple-element.15, f32[4,200]{1,0} %get-tuple-element.14), kind=kLoop, calls=%fused_computation.2
  %custom-call.11 = f32[4,200,24]{2,1,0} custom-call(f32[4,200,200]{2,1,0} %fusion.2, f32[4,200,24]{2,1,0} %fusion.4), custom_call_target="__cublas$gemm", backend_config="{\"alphaReal\":1,\"dotDimensionNumbers\":{\"lhsContractingDimensions\":[\"2\"],\"rhsContractingDimensions\":[\"1\"],\"lhsBatchDimensions\":[\"0\"],\"rhsBatchDimensions\":[\"0\"]},\"batchSize\":\"4\"}"
  ROOT %fusion = f32[200,5244]{1,0} fusion(f32[5244]{0} %constant_279, f32[200,1852]{1,0} %arg6.7, f32[200,96]{1,0} %arg7.8, f32[200,96]{1,0} %slice.197, f32[200,96]{1,0} %slice.199, f32[200,6,8]{2,1,0} %get-tuple-element, f32[200,1,8]{2,1,0} %get-tuple-element.10, f32[200,2,8]{2,1,0} %get-tuple-element.6, f32[200,6,8]{2,1,0} %get-tuple-element.1, f32[200,1,8]{2,1,0} %get-tuple-element.13, f32[200,2,8]{2,1,0} %get-tuple-element.7, f32[200,6,8]{2,1,0} %get-tuple-element.3, f32[200,1,8]{2,1,0} %get-tuple-element.11, f32[200,2,8]{2,1,0} %get-tuple-element.8, f32[200,6,8]{2,1,0} %get-tuple-element.2, f32[200,1,8]{2,1,0} %get-tuple-element.12, f32[200,2,8]{2,1,0} %get-tuple-element.9, f32[200,3,8]{2,1,0} %get-tuple-element.4, f32[200,3,8]{2,1,0} %get-tuple-element.5, f32[200,14,8]{2,1,0} %bitcast.45, f32[1,96]{1,0} %get-tuple-element.24, f32[1,128]{1,0} %get-tuple-element.26, f32[1,128]{1,0} %get-tuple-element.18, f32[1,96]{1,0} %get-tuple-element.22, f32[1,96]{1,0} %fusion.17, f16[1,1728]{1,0} %arg8.9, f32[5244]{0} %constant_276, f32[8,200,32]{2,1,0} %custom-call.8, f32[4,200,24,1]{3,2,1,0} %arg5.6, f32[4,200,24]{2,1,0} %custom-call.11, f32[200,14,2,4]{3,2,1,0} %arg4.5), kind=kLoop, calls=%fused_computation
}

