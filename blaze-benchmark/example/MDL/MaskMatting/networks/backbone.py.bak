import torch
from torch import nn
from torch.nn import init
import torch.nn.functional as F
from torch.autograd import Variable
import torchvision
import numpy as np
import cv2
import sys
import os
cur_path = os.path.abspath(os.path.dirname(__file__))
working_dir = os.path.join(cur_path, '../')
sys.path.append(working_dir)
from cqutils import initialize_weights
from networks.Layers import BatchNormCaffe
from config import *

__all__ = ['Res50BasePytorch',
           'Res50BaseCaffe',
        ]

class Res50BasePytorch(nn.Module):
    def __init__(self, use_bn=True, use_own_bn=False,
                 strides=[1, 2, 2, 2],
                 layers=[3, 4, 6, 3],
                 dilations=[1, 1, 1, 1]):
        super(Res50BasePytorch, self).__init__()
        self.expansion = 4
        self.inplanes = 64
        self.use_bn = use_bn
        self.use_own_bn = use_own_bn
        self.conv1 = nn.Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2),
                               padding=(3, 3), bias=False)
        self.bn1 = BatchNormCaffe(64) if self.use_own_bn else nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.layer1 = self._make_layer(64, layers[0], stride=strides[0], dilation=dilations[0])
        self.layer2 = self._make_layer(128, layers[1], stride=strides[1], dilation=dilations[1])
        self.layer3 = self._make_layer(256, layers[2], stride=strides[2], dilation=dilations[2])
        self.layer4 = self._make_layer(512, layers[3], stride=strides[3], dilation=dilations[3])
        # self.avgpool = nn.AvgPool2d(7, stride=1)
        # self.fc = nn.Linear(512 * block.expansion, num_classes)

    def forward(self, x):
        encoder = []
        x = self.conv1(x)
        if self.use_bn:
            x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)
        encoder.append(x)
        x = self.layer1(x)
        encoder.append(x)
        x = self.layer2(x)
        encoder.append(x)
        x = self.layer3(x)
        encoder.append(x)
        x = self.layer4(x)
        encoder.append(x)

        return encoder

    def _make_layer(self, planes, blocks, stride=1, dilation=1):
        downsample = None
        if stride != 1 or self.inplanes != planes * self.expansion:
            if self.use_bn:
                downsample = nn.Sequential(
                    nn.Conv2d(self.inplanes, planes * self.expansion,
                              kernel_size=1, dilation=dilation,
                              stride=stride, bias=False),
                    BatchNormCaffe(planes * self.expansion) if self.use_own_bn else \
                        nn.BatchNorm2d(planes * self.expansion),
                )
            else:
                downsample = nn.Sequential(
                    nn.Conv2d(self.inplanes, planes * self.expansion,
                              kernel_size=1, stride=stride,
                              dilation=dilation, bias=False),
                )

        layers = []
        layers.append(BottleNeck(self.inplanes, planes, stride, dilation, downsample,
                                 use_bn=self.use_bn, use_own_bn=self.use_own_bn))
        self.inplanes = planes * self.expansion
        for i in range(1, blocks):
            layers.append(BottleNeck(self.inplanes, planes,
                                     use_bn=self.use_bn, use_own_bn=self.use_own_bn))

        return nn.Sequential(*layers)

class Res50BaseCaffe(nn.Module):
    def __init__(self, use_bn=True, use_own_bn=False,
                 layers=[3, 4, 6, 3]):
        super(Res50BaseCaffe, self).__init__()
        self.expansion = 4
        self.inplanes = 64
        self.use_bn = use_bn
        self.use_own_bn = use_own_bn
        self.conv1 = nn.Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2),
                               padding=(3, 3), bias=True)
        if self.use_bn:
            self.bn1 = BatchNormCaffe(64) if self.use_own_bn else nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=0, ceil_mode=True)
        self.layer1 = self._make_layer(64, layers[0])
        self.layer2 = self._make_layer(128, layers[1], stride=2)
        self.layer3 = self._make_layer(256, layers[2], stride=1)
        self.layer4 = self._make_layer(512, layers[3], stride=1)
        # self.avgpool = nn.AvgPool2d(7, stride=1)
        # self.fc = nn.Linear(512 * block.expansion, num_classes)

    def forward(self, x):
        encoder = []

        x = self.conv1(x)
        if self.use_bn:
            x = self.bn1(x)
        x = self.relu(x)
        encoder.append(x)
        x = self.maxpool(x)
        x = self.layer1(x)
        encoder.append(x)
        x = self.layer2(x)
        encoder.append(x)
        x = self.layer3(x)
        encoder.append(x)
        x = self.layer4(x)
        encoder.append(x)

        return encoder

    def _make_layer(self, planes, blocks, stride=1):
        downsample = None
        if stride != 1 or self.inplanes != planes * self.expansion:
            if self.use_bn:
                downsample = nn.Sequential(
                    nn.Conv2d(self.inplanes, planes * self.expansion,
                              kernel_size=1, stride=stride, bias=False),
                    BatchNormCaffe(planes * self.expansion) if self.use_own_bn else \
                        nn.BatchNorm2d(planes * self.expansion),
                )
            else:
                downsample = nn.Sequential(
                    nn.Conv2d(self.inplanes, planes * self.expansion,
                              kernel_size=1, stride=stride, bias=False),
                )

        layers = []
        layers.append(BottleNeck(self.inplanes, planes, stride, downsample,
                                 use_bn=self.use_bn, use_own_bn=self.use_own_bn))
        self.inplanes = planes * self.expansion
        for i in range(1, blocks):
            layers.append(BottleNeck(self.inplanes, planes, use_bn=self.use_bn,
                                     use_own_bn=self.use_own_bn))

        return nn.Sequential(*layers)

class BottleNeck(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, dilation=1,
                 downsample=None, use_bn=True,
                 use_own_bn=False):
        super(BottleNeck, self).__init__()
        self.use_bn = use_bn
        self.use_own_bn = use_own_bn
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, stride=1, bias=False)
        if self.use_bn:
            self.bn1 = BatchNormCaffe(planes) if self.use_own_bn else nn.BatchNorm2d(planes)
        self.relu1 = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride,
                               dilation=dilation, padding=dilation, bias=False)
        self.relu2 = nn.ReLU(inplace=True)
        if self.use_bn:
            self.bn2 = BatchNormCaffe(planes) if self.use_own_bn else nn.BatchNorm2d(planes)
        self.conv3 = nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False)
        if self.use_bn:
            self.bn3 = BatchNormCaffe(planes*4) if self.use_own_bn else nn.BatchNorm2d(planes*4)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        if self.use_bn:
            out = self.bn1(out)
        out = self.relu1(out)

        out = self.conv2(out)
        if self.use_bn:
            out = self.bn2(out)
        out = self.relu2(out)

        out = self.conv3(out)
        if self.use_bn:
            out = self.bn3(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out

if __name__ == '__main__':
    model = Res50BasePytorch(use_own_bn=True)
    num_params = 0
    for p in model.parameters():
        num_params += p.numel()